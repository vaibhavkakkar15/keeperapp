{"ast":null,"code":"/* eslint-disable node/no-deprecated-api */\n\nvar toString = Object.prototype.toString;\nvar isModern = typeof Buffer !== 'undefined' && typeof Buffer.alloc === 'function' && typeof Buffer.allocUnsafe === 'function' && typeof Buffer.from === 'function';\nfunction isArrayBuffer(input) {\n  return toString.call(input).slice(8, -1) === 'ArrayBuffer';\n}\nfunction fromArrayBuffer(obj, byteOffset, length) {\n  byteOffset >>>= 0;\n  var maxLength = obj.byteLength - byteOffset;\n  if (maxLength < 0) {\n    throw new RangeError(\"'offset' is out of bounds\");\n  }\n  if (length === undefined) {\n    length = maxLength;\n  } else {\n    length >>>= 0;\n    if (length > maxLength) {\n      throw new RangeError(\"'length' is out of bounds\");\n    }\n  }\n  return isModern ? Buffer.from(obj.slice(byteOffset, byteOffset + length)) : new Buffer(new Uint8Array(obj.slice(byteOffset, byteOffset + length)));\n}\nfunction fromString(string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8';\n  }\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding');\n  }\n  return isModern ? Buffer.from(string, encoding) : new Buffer(string, encoding);\n}\nfunction bufferFrom(value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number');\n  }\n  if (isArrayBuffer(value)) {\n    return fromArrayBuffer(value, encodingOrOffset, length);\n  }\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset);\n  }\n  return isModern ? Buffer.from(value) : new Buffer(value);\n}\nmodule.exports = bufferFrom;","map":null,"metadata":{},"sourceType":"script"}